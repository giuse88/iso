\BOOKMARK [0][]{section*.2}{Contents}{}% 1
\BOOKMARK [0][]{section*.4}{List of Figures}{}% 2
\BOOKMARK [0][]{section*.4}{Nomenclature}{}% 3
\BOOKMARK [0][]{chapter.1}{1 Introduction}{}% 4
\BOOKMARK [1][]{section.1.1}{1.1 System Call interceptor}{chapter.1}% 5
\BOOKMARK [1][]{section.1.2}{1.2 State of art in the system call interceptor}{chapter.1}% 6
\BOOKMARK [1][]{section.1.3}{1.3 \040Issues}{chapter.1}% 7
\BOOKMARK [1][]{section.1.4}{1.4 Requirements}{chapter.1}% 8
\BOOKMARK [1][]{section.1.5}{1.5 Design goal}{chapter.1}% 9
\BOOKMARK [0][]{chapter.2}{2 Ptrace}{}% 10
\BOOKMARK [1][]{section.2.1}{2.1 Ptrace tracing mechanism}{chapter.2}% 11
\BOOKMARK [1][]{section.2.2}{2.2 System call virtualization}{chapter.2}% 12
\BOOKMARK [1][]{section.2.3}{2.3 Memory access}{chapter.2}% 13
\BOOKMARK [1][]{section.2.4}{2.4 Multi thread applications}{chapter.2}% 14
\BOOKMARK [1][]{section.2.5}{2.5 Aborting a system call}{chapter.2}% 15
\BOOKMARK [1][]{section.2.6}{2.6 Conclusion}{chapter.2}% 16
\BOOKMARK [0][]{chapter.3}{3 Kernel-based tracing mechanisms}{}% 17
\BOOKMARK [1][]{section.3.1}{3.1 Utrace}{chapter.3}% 18
\BOOKMARK [2][]{subsection.3.1.1}{3.1.1 Setting up a System call interceptor mechanism using Utrace}{section.3.1}% 19
\BOOKMARK [1][]{section.3.2}{3.2 Kernel hybrid interposition architecture}{chapter.3}% 20
\BOOKMARK [1][]{section.3.3}{3.3 Kernel delegating architecture}{chapter.3}% 21
\BOOKMARK [1][]{section.3.4}{3.4 Kernel Probes}{chapter.3}% 22
\BOOKMARK [2][]{subsection.3.4.1}{3.4.1 System call interceptor using kernel probes}{section.3.4}% 23
\BOOKMARK [0][]{section*.6}{References}{}% 24
